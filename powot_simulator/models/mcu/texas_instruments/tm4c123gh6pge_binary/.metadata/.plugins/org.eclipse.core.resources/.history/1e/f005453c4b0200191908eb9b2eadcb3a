/*
    Copyright (C) 2018 Lubomir Bogdanov

    Contributor Lubomir Bogdanov <lbogdanov@tu-sofia.bg>

    This file is part of Powot Simulator.

    Powot Simulator is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Powot Simulator is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Powot Simulator.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "aux.h"

unsigned long atohex(const char *hex_str){
	char *ptr;
	int field_counter = 0;
	int hex_len;
	int i;
	int lsb_to_msb = 0;
	uint32_t result = 0;

	ptr = strtok((char *)hex_str, "x");

	while (ptr != NULL){
		if(field_counter == 1){
			hex_len = strlen(ptr);
			printf("@@@ %s %d\n", ptr, hex_len);
			for(i = hex_len - 1; i >= 0; i--){
				printf("hex_to_decimal(&ptr[i]): %d\n", hex_to_decimal(&ptr[i]));
				printf("pow(16, lsb_to_msb): %d\n", pow(16, lsb_to_msb));
				result += (hex_to_decimal(&ptr[i]) * (pow(16, lsb_to_msb)));

				/*switch(lsb_to_msb){
				case 0:
					printf("%d", lsb_to_msb);
					result += hex_to_decimal(&ptr[i]) * 1;
					//printf("result0=%d\n", result);
					break;
				case 1:
					printf("%d", lsb_to_msb);
					result += hex_to_decimal(&ptr[i]) * (pow(16, 1);
					//printf("result1=%d\n", result);
					break;
				case 2:
					printf("%d", lsb_to_msb);
					result += hex_to_decimal(&ptr[i]) * 256;
					break;
				case 3:
					printf("%d", lsb_to_msb);
					result += hex_to_decimal(&ptr[i]) * 65536;
					break;
				case 4:
					break;
				case 5:
					break;
				case 6:
					break;
				case 7:
					break;
				}*/
				lsb_to_msb++;
			}
		}
		field_counter++;
		ptr = strtok (NULL, " ");
	}

	return result;
}

uint8_t hex_to_decimal(char *digit){
	uint8_t dec_digit;
printf("ch --> %c\n", *digit);
	if(*digit >= 0x30 && *digit <= 0x39){
		dec_digit = atoi(digit);
	}
	else if(*digit >= 'a' && *digit <= 'f' && *digit >= 'A' && *digit <= 'F'){
		switch(*digit){
		case 'a':
		case 'A':
			dec_digit = 10;
			break;
		case 'b':
		case 'B':
			dec_digit = 11;
			break;
		case 'c':
		case 'C':
			dec_digit = 12;
			break;
		case 'd':
		case 'D':
			dec_digit = 13;
			break;
		case 'e':
		case 'E':
			dec_digit = 14;
			break;
		case 'f':
		case 'F':
			dec_digit = 15;
			break;
		}
	}
	else{
		dec_digit = 0;
	}

	return dec_digit;
}

